-- Address decode logic for ipbus fabric
-- 
-- This file has been AUTOGENERATED from the address table - do not hand edit
-- 
-- We assume the synthesis tool is clever enough to recognise exclusive conditions
-- in the if statement.
-- 
-- Dave Newbold, February 2011

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use ieee.numeric_std.all;

package ipbus_decode_ultra_data is

  constant IPBUS_SEL_WIDTH: positive := 5; -- Should be enough for now?
  subtype ipbus_sel_t is std_logic_vector(IPBUS_SEL_WIDTH - 1 downto 0);
  function ipbus_sel_ultra_data(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t;

-- START automatically  generated VHDL the Mon Mar  5 16:18:48 2018 
  constant N_SLV_QUAD00: integer := 0;
  constant N_SLV_QUAD01: integer := 1;
  constant N_SLV_QUAD02: integer := 2;
  constant N_SLV_QUAD03: integer := 3;
  constant N_SLV_QUAD04: integer := 4;
  constant N_SLV_QUAD05: integer := 5;
  constant N_SLV_QUAD06: integer := 6;
  constant N_SLV_QUAD07: integer := 7;
  constant N_SLV_QUAD08: integer := 8;
  constant N_SLV_QUAD09: integer := 9;
  constant N_SLV_QUAD0A: integer := 10;
  constant N_SLV_QUAD0B: integer := 11;
  constant N_SLV_QUAD0C: integer := 12;
  constant N_SLV_QUAD0D: integer := 13;
  constant N_SLV_QUAD0E: integer := 14;
  constant N_SLV_QUAD0F: integer := 15;
  constant N_SLV_QUAD10: integer := 16;
  constant N_SLV_QUAD11: integer := 17;
  constant N_SLV_QUAD12: integer := 18;
  constant N_SLAVES: integer := 19;
-- END automatically generated VHDL

    
end ipbus_decode_ultra_data;

package body ipbus_decode_ultra_data is

  function ipbus_sel_ultra_data(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t is
    variable sel: ipbus_sel_t;
  begin

-- START automatically  generated VHDL the Mon Mar  5 16:18:48 2018 
    if    std_match(addr, "---------------00000------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_QUAD00, IPBUS_SEL_WIDTH)); -- quad00 / base 0x00000000 / mask 0x0001f000
    elsif std_match(addr, "---------------00001------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_QUAD01, IPBUS_SEL_WIDTH)); -- quad01 / base 0x00001000 / mask 0x0001f000
    elsif std_match(addr, "---------------00010------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_QUAD02, IPBUS_SEL_WIDTH)); -- quad02 / base 0x00002000 / mask 0x0001f000
    elsif std_match(addr, "---------------00011------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_QUAD03, IPBUS_SEL_WIDTH)); -- quad03 / base 0x00003000 / mask 0x0001f000
    elsif std_match(addr, "---------------00100------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_QUAD04, IPBUS_SEL_WIDTH)); -- quad04 / base 0x00004000 / mask 0x0001f000
    elsif std_match(addr, "---------------00101------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_QUAD05, IPBUS_SEL_WIDTH)); -- quad05 / base 0x00005000 / mask 0x0001f000
    elsif std_match(addr, "---------------00110------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_QUAD06, IPBUS_SEL_WIDTH)); -- quad06 / base 0x00006000 / mask 0x0001f000
    elsif std_match(addr, "---------------00111------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_QUAD07, IPBUS_SEL_WIDTH)); -- quad07 / base 0x00007000 / mask 0x0001f000
    elsif std_match(addr, "---------------01000------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_QUAD08, IPBUS_SEL_WIDTH)); -- quad08 / base 0x00008000 / mask 0x0001f000
    elsif std_match(addr, "---------------01001------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_QUAD09, IPBUS_SEL_WIDTH)); -- quad09 / base 0x00009000 / mask 0x0001f000
    elsif std_match(addr, "---------------01010------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_QUAD0A, IPBUS_SEL_WIDTH)); -- quad0A / base 0x0000a000 / mask 0x0001f000
    elsif std_match(addr, "---------------01011------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_QUAD0B, IPBUS_SEL_WIDTH)); -- quad0B / base 0x0000b000 / mask 0x0001f000
    elsif std_match(addr, "---------------01100------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_QUAD0C, IPBUS_SEL_WIDTH)); -- quad0C / base 0x0000c000 / mask 0x0001f000
    elsif std_match(addr, "---------------01101------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_QUAD0D, IPBUS_SEL_WIDTH)); -- quad0D / base 0x0000d000 / mask 0x0001f000
    elsif std_match(addr, "---------------01110------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_QUAD0E, IPBUS_SEL_WIDTH)); -- quad0E / base 0x0000e000 / mask 0x0001f000
    elsif std_match(addr, "---------------01111------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_QUAD0F, IPBUS_SEL_WIDTH)); -- quad0F / base 0x0000f000 / mask 0x0001f000
    elsif std_match(addr, "---------------10000------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_QUAD10, IPBUS_SEL_WIDTH)); -- quad10 / base 0x00010000 / mask 0x0001f000
    elsif std_match(addr, "---------------10001------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_QUAD11, IPBUS_SEL_WIDTH)); -- quad11 / base 0x00011000 / mask 0x0001f000
    elsif std_match(addr, "---------------10010------------") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_QUAD12, IPBUS_SEL_WIDTH)); -- quad12 / base 0x00012000 / mask 0x0001f000
-- END automatically generated VHDL

    else
        sel := ipbus_sel_t(to_unsigned(N_SLAVES, IPBUS_SEL_WIDTH));
    end if;

    return sel;

  end function ipbus_sel_ultra_data;

end ipbus_decode_ultra_data;

