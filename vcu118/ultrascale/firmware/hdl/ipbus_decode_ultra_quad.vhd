-- Address decode logic for ipbus fabric
-- 
-- This file has been AUTOGENERATED from the address table - do not hand edit
-- 
-- We assume the synthesis tool is clever enough to recognise exclusive conditions
-- in the if statement.
-- 
-- Dave Newbold, February 2011

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use ieee.numeric_std.all;

package ipbus_decode_ultra_quad is

  constant IPBUS_SEL_WIDTH: positive := 5; -- Should be enough for now?
  subtype ipbus_sel_t is std_logic_vector(IPBUS_SEL_WIDTH - 1 downto 0);
  function ipbus_sel_ultra_quad(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t;

-- START automatically  generated VHDL the Mon Mar  5 16:21:38 2018 
  constant N_SLV_CTRL: integer := 0;
  constant N_SLV_BUFFERS_RX0: integer := 1;
  constant N_SLV_BUFFERS_TX0: integer := 2;
  constant N_SLV_BUFFERS_RX1: integer := 3;
  constant N_SLV_BUFFERS_TX1: integer := 4;
  constant N_SLV_BUFFERS_RX2: integer := 5;
  constant N_SLV_BUFFERS_TX2: integer := 6;
  constant N_SLV_BUFFERS_RX3: integer := 7;
  constant N_SLV_BUFFERS_TX3: integer := 8;
  constant N_SLAVES: integer := 9;
-- END automatically generated VHDL

    
end ipbus_decode_ultra_quad;

package body ipbus_decode_ultra_quad is

  function ipbus_sel_ultra_quad(addr : in std_logic_vector(31 downto 0)) return ipbus_sel_t is
    variable sel: ipbus_sel_t;
  begin

-- START automatically  generated VHDL the Mon Mar  5 16:21:38 2018 
    if    std_match(addr, "---------------------------0000-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_CTRL, IPBUS_SEL_WIDTH)); -- ctrl / base 0x00000000 / mask 0x0000001e
    elsif std_match(addr, "---------------------------1000-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_BUFFERS_RX0, IPBUS_SEL_WIDTH)); -- buffers.rx0 / base 0x00000010 / mask 0x0000001e
    elsif std_match(addr, "---------------------------1001-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_BUFFERS_TX0, IPBUS_SEL_WIDTH)); -- buffers.tx0 / base 0x00000012 / mask 0x0000001e
    elsif std_match(addr, "---------------------------1010-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_BUFFERS_RX1, IPBUS_SEL_WIDTH)); -- buffers.rx1 / base 0x00000014 / mask 0x0000001e
    elsif std_match(addr, "---------------------------1011-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_BUFFERS_TX1, IPBUS_SEL_WIDTH)); -- buffers.tx1 / base 0x00000016 / mask 0x0000001e
    elsif std_match(addr, "---------------------------1100-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_BUFFERS_RX2, IPBUS_SEL_WIDTH)); -- buffers.rx2 / base 0x00000018 / mask 0x0000001e
    elsif std_match(addr, "---------------------------1101-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_BUFFERS_TX2, IPBUS_SEL_WIDTH)); -- buffers.tx2 / base 0x0000001a / mask 0x0000001e
    elsif std_match(addr, "---------------------------1110-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_BUFFERS_RX3, IPBUS_SEL_WIDTH)); -- buffers.rx3 / base 0x0000001c / mask 0x0000001e
    elsif std_match(addr, "---------------------------1111-") then
      sel := ipbus_sel_t(to_unsigned(N_SLV_BUFFERS_TX3, IPBUS_SEL_WIDTH)); -- buffers.tx3 / base 0x0000001e / mask 0x0000001e
-- END automatically generated VHDL

    else
        sel := ipbus_sel_t(to_unsigned(N_SLAVES, IPBUS_SEL_WIDTH));
    end if;

    return sel;

  end function ipbus_sel_ultra_quad;

end ipbus_decode_ultra_quad;

